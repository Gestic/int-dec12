var mod = {
    checkForRequiredCreeps: () => {
        //    let requiredCreeps = [];
        let requiredCreeps = [];
        //    for each source{
        var son = 1;
        for (var roomName in Game.rooms) {
            var room = Game.rooms[roomName];
            if (room.my) {
                room.sources.forEach((source) => {
                    //        if source has no miner {
                    //        requiredCreeps.push(new miner
                    let existingMiner = Population.findCreepDestiny("miner", source.id);
                    if (!existingMiner) {
                        var spawnRoomName = Room.bestSpawnRoomFor(source);
                        var setup = 'miner';
                        var parts = [WORK, WORK, WORK, WORK, WORK, CARRY, MOVE, MOVE];
                        for (let iMulti = 0; iMulti < routeRange(spawnRoomName, source.pos.roomName); iMulti++) {
                            parts = parts.concat([MOVE]);
                        }
                        //var cost = Creep.setup.bodyCosts(parts);
                        var name = setup + '-' + source.pos.roomName;
                        var destiny = source.id;
                        Game.rooms[spawnRoomName].spawnQueueHigh.push({
                            parts: parts,
                            name: name,
                            setup: setup,
                            destiny: destiny
                        });
                        console.log(destiny + ": " + source.pos.roomName + " - " + spawnRoomName);
                    }
                    //      }
                });
                //    }
            }
        }
        //    if room.haulers == 0 
        //      requiredCreeps.push(new miner);
        //    for each creep in requiredCreeps{
        //      let room = Room.bestSpawnRoom(task);
        //      room.queue.push(creep);
        //    }


        /*            let notDeterminated = source => {
                        let hasThisSource = data => { return data.determinatedTarget == source.id };
                        let existingBranding = _.find(Memory.population, hasThisSource);
                        return !existingBranding;
                    };
                    source = _.find(creep.room.sources, notDeterminated);
                    if( source ) {
                        creep.data.determinatedTarget = source.id;
                    }
                    */
        /*
            var isAddable = target => that.isAddableTarget(target, creep);
            return _.find(creep.room.constructionSites, isAddable);
            */
        /*
                        let guests = _.countBy(source.targetOf, 'creepType');
                        let count = guests[creep.data.creepType];
                        */

        /*
        var loop = spawn => {
                        if(spawn.room.my) spawn.loop();
                    }
                    _.forEach(Game.spawns, loop);
                    */
    }
};

module.exports = mod;